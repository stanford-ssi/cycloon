Y <- c("blue","blue","blue","blue","red","red","red")
plot(X2 ~ X1, col=Y, pch=19)
abline(a=-2,b=(0.4999471/0.4998958), col="green", lwd=3)
abline(a=-3,b=(.55/.45), col="blue", lwd=3)
library(e1071)
dat <- data.frame(X2=X2, X1=X1, Y=as.factor(Y))
svmfit <- svm(Y~., data=dat, kernel="linear", cost=10, scale=FALSE)
plot(svmfit, dat, ylim=c(5,18), xlim=c(5,18), symbolPalette=c("blue", "red3"), col=c("lightblue", "tomato"))
#abline(a=0,b=(0.4999471/0.4998958), col="green", lwd=3)
#abline(a=0, b=1, col="red")
t(svmfit$coefs) %*% svmfit$SV
X1 <- c(13.58, 9.60, 17.60, 5.56, 9.60, 17.60, 17.58)
X2 <- c(17.50, 9.60, 17.60, 17.60, 5.60, 13.60, 5.60)
Y <- c("blue","blue","blue","blue","red","red","red")
plot(X2 ~ X1, col=Y, pch=19)
abline(a=-2,b=(0.4999471/0.4998958), col="green", lwd=3)
abline(a=-3.5,b=(.55/.45), col="blue", lwd=3)
library(e1071)
dat <- data.frame(X2=X2, X1=X1, Y=as.factor(Y))
svmfit <- svm(Y~., data=dat, kernel="linear", cost=10, scale=FALSE)
plot(svmfit, dat, ylim=c(5,18), xlim=c(5,18), symbolPalette=c("blue", "red3"), col=c("lightblue", "tomato"))
#abline(a=0,b=(0.4999471/0.4998958), col="green", lwd=3)
#abline(a=0, b=1, col="red")
t(svmfit$coefs) %*% svmfit$SV
X1 <- c(13.58, 9.60, 17.60, 5.56, 9.60, 17.60, 17.58)
X2 <- c(17.50, 9.60, 17.60, 17.60, 5.60, 13.60, 5.60)
Y <- c("blue","blue","blue","blue","red","red","red")
plot(X2 ~ X1, col=Y, pch=19)
abline(a=-2,b=(0.4999471/0.4998958), col="green", lwd=3)
abline(a=-4,b=(.55/.45), col="blue", lwd=3)
library(e1071)
dat <- data.frame(X2=X2, X1=X1, Y=as.factor(Y))
svmfit <- svm(Y~., data=dat, kernel="linear", cost=10, scale=FALSE)
plot(svmfit, dat, ylim=c(5,18), xlim=c(5,18), symbolPalette=c("blue", "red3"), col=c("lightblue", "tomato"))
#abline(a=0,b=(0.4999471/0.4998958), col="green", lwd=3)
#abline(a=0, b=1, col="red")
t(svmfit$coefs) %*% svmfit$SV
X1 <- c(13.58, 9.60, 17.60, 5.56, 9.60, 17.60, 17.58)
X2 <- c(17.50, 9.60, 17.60, 17.60, 5.60, 13.60, 5.60)
Y <- c("blue","blue","blue","blue","red","red","red")
plot(X2 ~ X1, col=Y, pch=19)
abline(a=-2,b=(0.4999471/0.4998958), col="green", lwd=3)
abline(a=-4.5,b=(.55/.45), col="blue", lwd=3)
library(e1071)
dat <- data.frame(X2=X2, X1=X1, Y=as.factor(Y))
svmfit <- svm(Y~., data=dat, kernel="linear", cost=10, scale=FALSE)
plot(svmfit, dat, ylim=c(5,18), xlim=c(5,18), symbolPalette=c("blue", "red3"), col=c("lightblue", "tomato"))
#abline(a=0,b=(0.4999471/0.4998958), col="green", lwd=3)
#abline(a=0, b=1, col="red")
t(svmfit$coefs) %*% svmfit$SV
library(ISLR)
OJ
set.seed(2017); train = sample(1:nrow(OJ), 535); test = setdiff(1:nrow(OJ), train)
library(e1071)
svmfit=svm(Purchase ~ ., data=train, kernel="linear", cost=1, scale=TRUE)
OJ.train <- OJ[train]
OJ.train <- OJ[train,]
OJ.test <- OJ[test,]
svmfit=svm(Purchase ~ ., data=OJ.train, kernel="linear", cost=1, scale=TRUE)
library(e1071)
svmfit=svm(Purchase ~ ., data=OJ.train, kernel="linear", cost=1, scale=TRUE)
summary(svmfit)
ypred=predict(svmfit,OJ.test)
ypred
OJ.test$Purchase-ypred
sum(OJ.test$Purchase==ypred)
sum(OJ.test$Purchase!=ypred)
sum(OJ.test$Purchase!=ypred) / nrow(OJ.test)
ypred=predict(svmfit,OJ.train)
sum(OJ.train$Purchase!=ypred) / nrow(OJ.train)
ypred=predict(svmfit,OJ.test)
sum(OJ.test$Purchase!=ypred) / nrow(OJ.test)
ypred=predict(svmfit,OJ.train)
length(ypred)
sum(OJ.train$Purchase!=ypred)
train
length(unique(train))
length(unique(test))
?sample
ypred=predict(svmfit,OJ.train)
sum(OJ.train$Purchase!=ypred) / nrow(OJ.train)
ypred=predict(svmfit,OJ.test)
sum(OJ.test$Purchase!=ypred) / nrow(OJ.test)
tune.out=tune(svmfit, Predict ~ .,data=OJ.train,kernel="linear", ranges=list(cost=c(0.01,0.1,1,5,10)))
tune.out=tune(svm, Predict ~ .,data=OJ.train,kernel="linear", ranges=list(cost=c(0.01,0.1,1,5,10)))
tune.out=tune(svm, Purchase ~ .,data=OJ.train,kernel="linear", ranges=list(cost=c(0.01,0.1,1,5,10)))
tune.out=tune(svm, Purchase ~ .,data=OJ.train,kernel="linear", ranges=list(cost=c(0.01,0.1,1,5,10)))
summary(tune.out)
summary(tune.out)
summary(tune.out)
ypred.train=predict(svmfit,OJ.train)
sum(OJ.train$Purchase!=ypred.train) / nrow(OJ.train)
ypred.test=predict(svmfit,OJ.test)
sum(OJ.test$Purchase!=ypred.test) / nrow(OJ.test)
ypred.train=predict(svmfit,OJ.train)
sum(OJ.train$Purchase!=ypred.train) / nrow(OJ.train)
ypred.test=predict(svmfit,OJ.test)
sum(OJ.test$Purchase!=ypred.test) / nrow(OJ.test)
svmfit=svm(Purchase ~ ., data=OJ.train, kernel="radial", cost=1, scale=TRUE)
summary(svmfit)
# Training error
ypred.train=predict(svmfit,OJ.train)
sum(OJ.train$Purchase!=ypred.train) / nrow(OJ.train)
# Test error
ypred.test=predict(svmfit,OJ.test)
sum(OJ.test$Purchase!=ypred.test) / nrow(OJ.test)
tune.out=tune(svm, Purchase ~ .,data=OJ.train,kernel="radial", ranges=list(cost=c(0.01,0.1,1,5,10)))
summary(tune.out)
svmfit=svm(Purchase ~ ., data=OJ.train, kernel="radial", cost=1, scale=TRUE)
summary(svmfit)
summary(tune.out)
# Training error
ypred.train=predict(svmfit,OJ.train)
sum(OJ.train$Purchase!=ypred.train) / nrow(OJ.train)
# Test error
ypred.test=predict(svmfit,OJ.test)
sum(OJ.test$Purchase!=ypred.test) / nrow(OJ.test)
tune.out=tune(svm, Purchase ~ .,data=OJ.train,kernel="radial", ranges=list(cost=c(0.01,0.1,1,5,10)))
summary(tune.out)
summary(tune.out)
?svm
svmfit=svm(Purchase ~ ., data=OJ.train, kernel="polynomial", degree=2, cost=1, scale=TRUE)
summary(svmfit)
# Training error
ypred.train=predict(svmfit,OJ.train)
sum(OJ.train$Purchase!=ypred.train) / nrow(OJ.train)
# Test error
ypred.test=predict(svmfit,OJ.test)
sum(OJ.test$Purchase!=ypred.test) / nrow(OJ.test)
tune.out=tune(svm, Purchase ~ .,data=OJ.train,kernel="polynomial", degree=2, ranges=list(cost=c(0.01,0.1,1,5,10)))
summary(tune.out)
summary(tune.out)
bestfit=svm(Purchase ~ ., data=OJ.train, kernel="polynomial", degree=2, cost=1, scale=TRUE)
# Training error
ypred.train=predict(bestfit,OJ.train)
sum(OJ.train$Purchase!=ypred.train) / nrow(OJ.train)
# Test error
ypred.test=predict(bestfit,OJ.test)
sum(OJ.test$Purchase!=ypred.test) / nrow(OJ.test)
?poly
svmfit=svm(Purchase ~ poly(., degree=2), data=OJ.train, kernel="linear", cost=1, scale=TRUE)
colnames(OJ.test)
svmfit=svm(Purchase ~ poly(WeekofPurchase, degree=2) + poly(StoreID, degree=2) +
poly(PriceCH, degree=2) + poly(PriceMM, degree=2) + poly(DiscCH, degree=2) +
poly(DiscMM, degree=2) + poly(SpecialCH, degree=2) + poly(SpecialMM, degree=2) +
poly(LoyalCH, degree=2) + poly(SalePriceMM, degree=2) + poly(SalePriceCH, degree=2) +
poly(PriceDiff, degree=2) + poly(Store7, degree=2) + poly(PctDiscMM, degree=2) +
poly(PctDiscCH, degree=2) + poly(ListPriceDiff, degree=2) + poly(STORE, degree=2),
data=OJ.train, kernel="linear", cost=1, scale=TRUE)
svmfit=svm(Purchase ~ poly(WeekofPurchase, degree=2) + poly(StoreID, degree=2) +
poly(PriceCH, degree=2) + poly(PriceMM, degree=2) + poly(DiscCH, degree=2) +
poly(DiscMM, degree=2) + SpecialCH + SpecialMM +
poly(LoyalCH, degree=2) + poly(SalePriceMM, degree=2) + poly(SalePriceCH, degree=2) +
poly(PriceDiff, degree=2) + Store7 + poly(PctDiscMM, degree=2) +
poly(PctDiscCH, degree=2) + poly(ListPriceDiff, degree=2) + STORE,
data=OJ.train, kernel="linear", cost=1, scale=TRUE)
summary(svmfit)
# Training error
ypred.train=predict(svmfit,OJ.train)
sum(OJ.train$Purchase!=ypred.train) / nrow(OJ.train)
# Test error
ypred.test=predict(svmfit,OJ.test)
sum(OJ.test$Purchase!=ypred.test) / nrow(OJ.test)
tune.out=tune(svm, Purchase ~ poly(WeekofPurchase, degree=2) + poly(StoreID, degree=2) +
poly(PriceCH, degree=2) + poly(PriceMM, degree=2) + poly(DiscCH, degree=2) +
poly(DiscMM, degree=2) + SpecialCH + SpecialMM +
poly(LoyalCH, degree=2) + poly(SalePriceMM, degree=2) + poly(SalePriceCH, degree=2) +
poly(PriceDiff, degree=2) + Store7 + poly(PctDiscMM, degree=2) +
poly(PctDiscCH, degree=2) + poly(ListPriceDiff, degree=2) + STORE,
data=OJ.train, kernel="linear", ranges=list(cost=c(0.01,0.1,1,5,10)))
summary(tune.out)
bestfit=svm(Purchase ~ poly(WeekofPurchase, degree=2) + poly(StoreID, degree=2) +
poly(PriceCH, degree=2) + poly(PriceMM, degree=2) + poly(DiscCH, degree=2) +
poly(DiscMM, degree=2) + SpecialCH + SpecialMM +
poly(LoyalCH, degree=2) + poly(SalePriceMM, degree=2) + poly(SalePriceCH, degree=2) +
poly(PriceDiff, degree=2) + Store7 + poly(PctDiscMM, degree=2) +
poly(PctDiscCH, degree=2) + poly(ListPriceDiff, degree=2) + STORE,
data=OJ.train, kernel="linear", cost=10, scale=TRUE)
# Training error
ypred.train=predict(bestfit,OJ.train)
sum(OJ.train$Purchase!=ypred.train) / nrow(OJ.train)
# Test error
ypred.test=predict(bestfit,OJ.test)
sum(OJ.test$Purchase!=ypred.test) / nrow(OJ.test)
setwd("~/Documents/STATS 216/Homework")
library(data.table)
seed <- fread("seedData.csv")
?kmeans
set.seed(2017)
km.out=kmeans(seed,3,nstart=20)
km.out$cluster
plot(seed[,2] ~ seed[,6], col=(km.out$cluster +1), main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
seed[,2]
plot(seed[,c(2,6)], col=(km.out$cluster +1), main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
set.seed(2017)
km.out=kmeans(seed,3,nstart=20)
plot(seed[,c(2,6)], col=(km.out$cluster +1), main="K-Means Clustering Results with K=3", xlab="", ylab="", pch=20, cex=2)
hc.complete=hclust(dist(seed), method="complete")
plot(hc.complete,main="Complete Linkage", xlab="", sub="", cex =.9)
hc.complete=hclust(dist(seed), method="single")
plot(hc.complete,main="Single Linkage", xlab="", sub="", cex =.9)
hc.single=hclust(dist(seed), method="single")
rm(hc.complete)
plot(hc.single,main="Single Linkage", xlab="", sub="", cex =.9)
plot(seed[,c(2,6)], col=(cutree(hc.single, 3)+1), main="Hierarchical Clustering Results with K=3", xlab="", ylab="", pch=20, cex=2)
plot(seed[,c(2,6)], col=(cutree(hc.single, 3)+1), main="Hierarchical Clustering Results with Single Linkage", xlab="", ylab="", pch=20, cex=2)
plot(seed[,c(2,6)], col=(cutree(hc.single, 3)+1), main="Hierarchical Clustering Results with Single Linkage", xlab="", ylab="", pch=20, cex=2)
hc.complete=hclust(dist(seed), method="complete")
plot(hc.complete,main="Complete Linkage", xlab="", sub="", cex =.9)
load("als.RData")
pr.out=prcomp(train.X, scale=TRUE)
pr.out$rotation
pve=pr.var/sum(pr.var)
pr.var=pr.out$sdev^2
pve=pr.var/sum(pr.var)
plot(pve, xlab="Principal Component", ylab="Proportion of Variance Explained ", ylim=c(0,1),type=’b’)
pr.var=pr.out$sdev^2
pve=pr.var/sum(pr.var)
plot(pve, xlab="Principal Component", ylab="Proportion of Variance Explained ", ylim=c(0,1),type='b')
pr.var=pr.out$sdev^2
pve=pr.var/sum(pr.var)
plot(pve, xlab="Principal Component", ylab="Proportion of Variance Explained ", ylim=c(0,1),type='b')
plot(cumsum(pve), xlab="Principal Component ", ylab=" Cumulative Proportion of Variance Explained ", ylim=c(0,1), type='b')
pr.var=pr.out$sdev^2
pve=pr.var/sum(pr.var)
plot(pve, xlab="Principal Component", ylab="Proportion of Variance Explained ",
ylim=c(0,1),type='b',main="PVE")
plot(cumsum(pve), xlab="Principal Component ", ylab=" Cumulative Proportion of Variance Explained ",
ylim=c(0,1), type='b',main="Cumulative PVE")
train <- cbind(y=train.y, train.X)
View(train)
library(pls)
train <- cbind(y=train.y, train.X)
pcr.fit=pcr(y~., data=train,scale=TRUE,validation ="CV")
pcr.fit=pcr(y~.,data=train,scale=TRUE,validation ="CV",ncomp=100)
validationplot(pcr.fit,val.type="RMSEP")
RMSEP(pcr.fit)$val[2,1,1:101]
which.min(RMSEP(pcr.fit)$val[2,1,1:101])
min(RMSEP(pcr.fit)$val[2,1,1:101])
which.min(RMSEP(pcr.fit)$val[2,1,1:101])
pcr.pred=predict(pcr.fit,test.X,ncomp=87)
mean((pcr.pred-y.test)^2)
mean((pcr.pred-test.y)^2)
sqrt(mean((pcr.pred-test.y)^2))
setwd("~/Documents/SSI/Cycloon-main/cycloon")
library(data.table)
d1 <- fread("64onebit3.5")
View(d1)
plot(d1)
View(d1)
d1$ID <- seq.int(nrow(d1))
View(d1)
plot(V1 ~ ID, data=d1)
plot(V1 ~ ID, data=d1, type='l')
plot(V1 ~ ID, data=d1[500,], type='l')
d1[500c]
d1[500,]
plot(V1 ~ ID, data=d1[1:500,], type='l')
plot(V1 ~ ID, data=d1[1:50,], type='l')
plot(Strength ~ Time, data=d1[1:50,], type='l', xlab="Time", ylab="Reported Signal Strength", main="One Bit, Filter Length = 64, Actual Period = 3.5")
colnames(d1) <- c("Strength", "Time")
setwd("~/Documents/SSI/Cycloon-main/cycloon")
library(data.table)
d1 <- fread("64onebit3.5")
d1$ID <- seq.int(nrow(d1))
colnames(d1) <- c("Strength", "Time")
plot(Strength ~ Time, data=d1[1:50,], type='l', xlab="Time", ylab="Reported Signal Strength", main="One Bit, Filter Length = 64, Actual Period = 3.5")
plot(Strength ~ Time, data=d1[1:50,], type='l', xlab="Time", ylab="Reported Signal Strength at f=1/4", main="Filter Length = 64, Actual f=1/3.5")
plot(Strength ~ Time, data=d1[1:50,], type='l', xlab="Time", ylab="Reported Signal Strength at f=1/4", main="Filter Length = 64, Actual f=1/3.95")
d2 <- fread("64onebit3.95")
d2$ID <- seq.int(nrow(d2))
colnames(d2) <- c("Strength", "Time")
plot(Strength ~ Time, data=d2[1:50,], type='l', xlab="Time", ylab="Reported Signal Strength at f=1/4", main="Filter Length = 64, Actual f=1/3.95")
View(d2)
plot(Strength ~ Time, data=d2[1:50,], type='l', xlab="Time", ylab="Reported Signal Strength at f=1/4", main="Filter Length = 64, Actual f=1/3.95", ylim=c(0,max(d2$Strength)*1.1))
plot(Strength ~ Time, data=d1[1:50,], type='l', xlab="Time", ylab="Reported Signal Strength at f=1/4", main="Filter Length = 64, Actual f=1/3.5", ylim=c(0,max(d1$Strength)*1.1))
d3 <- fread("64onebit3.8")
d3$ID <- seq.int(nrow(d3))
colnames(d3) <- c("Strength", "Time")
plot(Strength ~ Time, data=d3[1:50,], type='l', xlab="Time", ylab="Reported Signal Strength at f=1/4", main="Filter Length = 64, Actual f=1/3.8", ylim=c(0,max(d3$Strength)*1.1))
d4 <- fread("64onebit4")
d4$ID <- seq.int(nrow(d4))
colnames(d4) <- c("Strength", "Time")
plot(Strength ~ Time, data=d4[1:50,], type='l', xlab="Time", ylab="Reported Signal Strength at f=1/4", main="Filter Length = 64, Actual f=1/4", ylim=c(0,max(d4$Strength)*1.1))
maxlim <- max(max(d1$Strength), max(d2$Strength), max(d3$Strength), max(d4$Strength))
maxlim <- max(max(d1$Strength), max(d2$Strength), max(d3$Strength), max(d4$Strength))*1.1
setwd("~/Documents/SSI/Cycloon-main/cycloon")
library(data.table)
d1 <- fread("64onebit3.5")
d1$ID <- seq.int(nrow(d1))
colnames(d1) <- c("Strength", "Time")
d2 <- fread("64onebit3.95")
d2$ID <- seq.int(nrow(d2))
colnames(d2) <- c("Strength", "Time")
d3 <- fread("64onebit3.8")
d3$ID <- seq.int(nrow(d3))
colnames(d3) <- c("Strength", "Time")
d4 <- fread("64onebit4")
d4$ID <- seq.int(nrow(d4))
colnames(d4) <- c("Strength", "Time")
maxlim <- max(max(d1$Strength), max(d2$Strength), max(d3$Strength), max(d4$Strength))*1.1
plot(Strength ~ Time, data=d1[1:50,], type='l', xlab="Time", ylab="Reported Signal Strength at f=1/4", main="Filter Length = 64, Actual f=1/3.5", ylim=c(0,maxlim))
plot(Strength ~ Time, data=d2[1:50,], type='l', xlab="Time", ylab="Reported Signal Strength at f=1/4", main="Filter Length = 64, Actual f=1/3.95", ylim=c(0,maxlim))
plot(Strength ~ Time, data=d3[1:50,], type='l', xlab="Time", ylab="Reported Signal Strength at f=1/4", main="Filter Length = 64, Actual f=1/3.8", ylim=c(0,maxlim))
plot(Strength ~ Time, data=d4[1:50,], type='l', xlab="Time", ylab="Reported Signal Strength at f=1/4", main="Filter Length = 64, Actual f=1/4", ylim=c(0,maxlim))
plot(Strength ~ Time, data=d1[1:50,], type='l', xlab="Time", ylab="Reported Signal Strength at f=1/4", main="Filter Length = 64, Actual f=1/3.5", ylim=c(0,maxlim))
plot(Strength ~ Time, data=d3[1:50,], type='l', xlab="Time", ylab="Reported Signal Strength at f=1/4", main="Filter Length = 64, Actual f=1/3.8", ylim=c(0,maxlim))
plot(Strength ~ Time, data=d2[1:50,], type='l', xlab="Time", ylab="Reported Signal Strength at f=1/4", main="Filter Length = 64, Actual f=1/3.95", ylim=c(0,maxlim))
plot(Strength ~ Time, data=d4[1:50,], type='l', xlab="Time", ylab="Reported Signal Strength at f=1/4", main="Filter Length = 64, Actual f=1/4", ylim=c(0,maxlim))
paste0("64onebit",3.5)
onebit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.1, 4.2, 4.5, 4.05, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.1, 8.2, 8.5, 8.05, 9)) {
dat <- fread(paste0("64onebit",f))
yval <- mean(dat$V1)
onebit <- rbind(onebit, cbind(f=f, strength=yval))
}
View(onebit)
zerobit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.1, 4.2, 4.5, 4.05, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.1, 8.2, 8.5, 8.05, 9)) {
dat <- fread(paste0("64zerobit",f))
yval <- mean(dat$V1)
onebit <- rbind(zerobit, cbind(f=f, strength=yval))
}
onebit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.1, 4.2, 4.5, 4.05, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.1, 8.2, 8.5, 8.05, 9)) {
dat <- fread(paste0("64onebit",f))
yval <- mean(dat$V1)
onebit <- rbind(onebit, cbind(f=f, strength=yval))
}
zerobit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.1, 4.2, 4.5, 4.05, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.1, 8.2, 8.5, 8.05, 9)) {
dat <- fread(paste0("64zerobit",f))
yval <- mean(dat$V1)
zerobit <- rbind(zerobit, cbind(f=f, strength=yval))
}
View(zerobit)
View(onebit)
plot(strength~f, data=onebit)
plot(strength~f, data=onebit, type='l')
onebit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.05, 4.1, 4.2, 4.5, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.05, 8.1, 8.2, 8.5, 9)) {
dat <- fread(paste0("64onebit",f))
yval <- mean(dat$V1)
onebit <- rbind(onebit, cbind(f=f, strength=yval))
}
zerobit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.05, 4.1, 4.2, 4.5, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.05, 8.1, 8.2, 8.5, 9)) {
dat <- fread(paste0("64zerobit",f))
yval <- mean(dat$V1)
zerobit <- rbind(zerobit, cbind(f=f, strength=yval))
}
plot(strength~f, data=onebit, type='l')
plot(strength~f, data=onebit, type='l', col='red')
lines(strength~f, data=zerobit, type='l', col='blue')
plot(strength~f, data=onebit, type='l', col='red', ylim=c(0, max(zerobit$strength)))
lines(strength~f, data=zerobit, type='l', col='blue')
plot(strength~f, data=onebit, type='l', col='red', ylim=c(0, max(zerobit$strength)), xlab="1/f")
lines(strength~f, data=zerobit, type='l', col='blue')
plot(strength~f, data=onebit, type='l', col='red', ylim=c(0, max(zerobit$strength)), xlab="1/f", ylab="Strength")
lines(strength~f, data=zerobit, type='l', col='blue')
plot(strength~f, data=onebit, type='l', col='red', ylim=c(0, max(zerobit$strength)), xlab="1/f", ylab="Detected Strength")
lines(strength~f, data=zerobit, type='l', col='blue')
legend("topleft", legend=c("One Bit", "Zero Bit"), col=c("red", "blue"), cex=0.8)
legend("topleft", legend=c("One Bit", "Zero Bit"), col=c("red", "blue"), lty=1, cex=0.8)
plot(strength~f, data=onebit, type='l', col='red', ylim=c(0, max(zerobit$strength)), xlab="1/f", ylab="Detected Strength", main="Filter Bandwidth")
lines(strength~f, data=zerobit, type='l', col='blue')
legend("topleft", legend=c("One Bit", "Zero Bit"), col=c("red", "blue"), lty=1, cex=0.8)
plot(strength~f, data=onebit, type='l', col='red', ylim=c(0, max(zerobit$strength)), xlab="1/f", ylab="Detected Strength", main="Filter Bandwidth for 64-bit Filter")
lines(strength~f, data=zerobit, type='l', col='blue')
legend("topleft", legend=c("One Bit", "Zero Bit"), col=c("red", "blue"), lty=1, cex=0.8)
onebit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.05, 4.1, 4.2, 4.5, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.05, 8.1, 8.2, 8.5, 9)) {
dat <- fread(paste0("128onebit",f))
yval <- mean(dat$V1)
onebit <- rbind(onebit, cbind(f=f, strength=yval))
}
zerobit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.05, 4.1, 4.2, 4.5, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.05, 8.1, 8.2, 8.5, 9)) {
dat <- fread(paste0("128zerobit",f))
yval <- mean(dat$V1)
zerobit <- rbind(zerobit, cbind(f=f, strength=yval))
}
plot(strength~f, data=onebit, type='l', col='red', ylim=c(0, max(zerobit$strength)), xlab="1/f", ylab="Detected Strength", main="Filter Bandwidth for 128-bit Filter")
lines(strength~f, data=zerobit, type='l', col='blue')
legend("topleft", legend=c("One Bit", "Zero Bit"), col=c("red", "blue"), lty=1, cex=0.8)
onebit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.05, 4.1, 4.2, 4.5, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.05, 8.1, 8.2, 8.5, 9)) {
dat <- fread(paste0("64onebit",f))
yval <- mean(dat$V1)
onebit <- rbind(onebit, cbind(f=f, strength=yval))
}
zerobit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.05, 4.1, 4.2, 4.5, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.05, 8.1, 8.2, 8.5, 9)) {
dat <- fread(paste0("64zerobit",f))
yval <- mean(dat$V1)
zerobit <- rbind(zerobit, cbind(f=f, strength=yval))
}
plot(strength~f, data=onebit, type='l', col='red', ylim=c(0, max(zerobit$strength)), xlab="1/f", ylab="Detected Strength", main="Filter Bandwidth for 64-bit Filter")
lines(strength~f, data=zerobit, type='l', col='blue')
legend("topleft", legend=c("One Bit", "Zero Bit"), col=c("red", "blue"), lty=1)
onebit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.05, 4.1, 4.2, 4.5, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.05, 8.1, 8.2, 8.5, 9)) {
dat <- fread(paste0("128onebit",f))
yval <- mean(dat$V1)
onebit <- rbind(onebit, cbind(f=f, strength=yval))
}
zerobit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.05, 4.1, 4.2, 4.5, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.05, 8.1, 8.2, 8.5, 9)) {
dat <- fread(paste0("128zerobit",f))
yval <- mean(dat$V1)
zerobit <- rbind(zerobit, cbind(f=f, strength=yval))
}
plot(strength~f, data=onebit, type='l', col='red', ylim=c(0, max(zerobit$strength)), xlab="1/f", ylab="Detected Strength", main="Filter Bandwidth for 128-bit Filter")
lines(strength~f, data=zerobit, type='l', col='blue')
legend("topleft", legend=c("One Bit", "Zero Bit"), col=c("red", "blue"), lty=1)
onebit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.05, 4.1, 4.2, 4.5, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.05, 8.1, 8.2, 8.5, 9)) {
dat <- fread(paste0("64onebit",f))
yval <- mean(dat$V1)
onebit <- rbind(onebit, cbind(f=f, strength=yval))
}
zerobit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.05, 4.1, 4.2, 4.5, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.05, 8.1, 8.2, 8.5, 9)) {
dat <- fread(paste0("64zerobit",f))
yval <- mean(dat$V1)
zerobit <- rbind(zerobit, cbind(f=f, strength=yval))
}
plot(strength~f, data=onebit, type='l', col='red', ylim=c(0, max(zerobit$strength)), xlab="1/f", ylab="Detected Strength", main="Filter Bandwidth for 64-bit Filter")
lines(strength~f, data=zerobit, type='l', col='blue')
legend("topleft", legend=c("One Bit", "Zero Bit"), col=c("red", "blue"), lty=1)
onebit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.05, 4.1, 4.2, 4.5, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.05, 8.1, 8.2, 8.5, 9)) {
dat <- fread(paste0("128onebit",f))
yval <- mean(dat$V1)
onebit <- rbind(onebit, cbind(f=f, strength=yval))
}
zerobit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.05, 4.1, 4.2, 4.5, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.05, 8.1, 8.2, 8.5, 9)) {
dat <- fread(paste0("128zerobit",f))
yval <- mean(dat$V1)
zerobit <- rbind(zerobit, cbind(f=f, strength=yval))
}
plot(strength~f, data=onebit, type='l', col='red', ylim=c(0, max(zerobit$strength)), xlab="1/f", ylab="Detected Strength", main="Filter Bandwidth for 128-bit Filter")
lines(strength~f, data=zerobit, type='l', col='blue')
legend("topleft", legend=c("One Bit", "Zero Bit"), col=c("red", "blue"), lty=1)
onebit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.05, 4.1, 4.2, 4.5, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.05, 8.1, 8.2, 8.5, 9)) {
dat <- fread(paste0("64onebit",f))
yval <- mean(dat$V1)
onebit <- rbind(onebit, cbind(f=f, strength=yval))
}
zerobit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.05, 4.1, 4.2, 4.5, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.05, 8.1, 8.2, 8.5, 9)) {
dat <- fread(paste0("64zerobit",f))
yval <- mean(dat$V1)
zerobit <- rbind(zerobit, cbind(f=f, strength=yval))
}
plot(strength~f, data=onebit, type='l', col='red', ylim=c(0, max(zerobit$strength)), xlab="1/f", ylab="Detected Strength", main="Filter Bandwidth for 64-bit Filter")
lines(strength~f, data=zerobit, type='l', col='blue')
legend("topleft", legend=c("One Bit", "Zero Bit"), col=c("red", "blue"), lty=1)
onebit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.05, 4.1, 4.2, 4.5, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.05, 8.1, 8.2, 8.5, 9)) {
dat <- fread(paste0("128onebit",f))
yval <- mean(dat$V1)
onebit <- rbind(onebit, cbind(f=f, strength=yval))
}
zerobit <- data.table()
for(f in c(3.5, 3.8, 3.9, 3.95, 4, 4.05, 4.1, 4.2, 4.5, 5, 6, 7,
7.5, 7.8, 7.9, 7.95, 8, 8.05, 8.1, 8.2, 8.5, 9)) {
dat <- fread(paste0("128zerobit",f))
yval <- mean(dat$V1)
zerobit <- rbind(zerobit, cbind(f=f, strength=yval))
}
plot(strength~f, data=onebit, type='l', col='red', ylim=c(0, max(zerobit$strength)), xlab="1/f", ylab="Detected Strength", main="Filter Bandwidth for 128-bit Filter")
lines(strength~f, data=zerobit, type='l', col='blue')
legend("topleft", legend=c("One Bit", "Zero Bit"), col=c("red", "blue"), lty=1)
dataaa <- data.table()
for(i in 1:31) {
d <- fread(paste0("offset",i))
names(d) <- c("y1","y2")
dataaa <- rbind(dataaa, cbind(offset=i, d))
}
View(dataaa)
plot(y1 ~ offset, data=dataaa, type='l')
plot(y1 ~ offset, data=dataaa, type='l', col='red')
lines(y2 ~ offset, data=dataaa, col='blue')
lines(y2 ~ offset, data=dataaa, col='blue')
plot(y1 ~ offset, data=dataaa, type='l', col='red', ylim=c(0, max(dataaa$y2)))
lines(y2 ~ offset, data=dataaa, col='blue')
dataaa$ratio <- dataaa$y2/dataaa$y1
plot(ratio ~ offset, data=dataaa)
plot(ratio ~ offset, data=dataaa, type='l')
plot(log(ratio) ~ offset, data=dataaa, type='l')
